package Gui;



import java.awt.Dimension;
import java.awt.Font;
import java.awt.Insets;
import java.io.File;

import javax.swing.BorderFactory;
import javax.swing.GroupLayout;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.ScrollPaneConstants;

import org.apache.log4j.Logger;

import Controller.Controller;
import Model.TraceToMap.BuildTaskInformation;



/**
*
* @author bryanrvvargas
*/
public class ChartPanel extends JPanel {

	private static Object[] optionsChartWidth  = {"1","2","3","4","5","10","Automatic"};
	private static Object[] optionsRun  = {"Complete","Step By Step"};
	private ColorsApp myColor = new ColorsApp();
	private Controller controller;
	private boolean chartLoaded ;
	private int myChart; // number of my chart 1 if is upper chart, other case 2
	private boolean stepByStep;
	
	private boolean firstClick;
	
	volatile private boolean backPressed = false;
	volatile private boolean forwardPressed = false;
	private Logger LOG;

	/**
	 * Creates new form ChartPanel
	 * @param myChart
	 */
   public ChartPanel(Controller controller) {
	   this.controller = controller;
	   this.LOG = controller.getLogger().getLogger();
	   this.chartLoaded = false;
	   chartGraphicPanel = new Chart(this.myChart,this.LOG);
	   this.firstClick = false;
	   this.saveChart = false;
       initComponents();
       
   }
   
   /**
    * Creates new form ChartPanel
    */
   public ChartPanel(BuildTaskInformation taskInfo,int myChart, boolean stepByStep, Logger log, int maxWidth) {
	   //this.taskInfo = taskInfo;
	   this.LOG = log;
	   this.myChart = myChart;
	   this.stepByStep = stepByStep;
	   this.chartLoaded = true; 
	   chartGraphicPanel = new Chart(taskInfo,this.myChart,this.stepByStep,this.LOG,maxWidth);
	   this.firstClick = true;
	   this.saveChart = false;
       initComponents();
   }
   
   /**
    * Creates new form ChartPanel
    */
   public ChartPanel( ) {
       initComponents();
   }

   public ChartPanel(BuildTaskInformation taskInfo, int myChart, boolean stepByStep, double timeEndCompare, Logger log, int maxWidth) {
		// TODO Auto-generated constructor stub
	   this.LOG = log;
	   this.myChart = myChart;
	   this.stepByStep = stepByStep;
	   this.chartLoaded = true; 
	   chartGraphicPanel = new Chart(taskInfo,this.myChart,this.stepByStep,timeEndCompare, this.LOG,maxWidth);
	   this.firstClick = true;
	   this.saveChart = false;
       initComponents();
   
   }

/**
    * This method is called from within the constructor to initialize the form.
    * WARNING: Do NOT modify this code. The content of this method is always
    * regenerated by the Form Editor.
    */
   @SuppressWarnings("unchecked")                       
   private void initComponents() {

       menuChartPanel = new JPanel();
       previewChartButton = new JButton();
       nextChartButton = new JButton();
       tittleScrollPane = new JScrollPane();
       tittleTextArea = new JTextArea();
       moveForwardButton = new JButton();
       moveBackButton = new JButton();
       saveOrLoadSimulationButton = new JButton();
       
       chartGraphicPanel.setController(this.controller);
       this.setSize(new Dimension(800, 340));
       setBackground(myColor.greyL1);
       chartGraphicPanel.setSize(800,307);
       chartGraphicPanel.setBackground(myColor.greyL2);

       menuChartPanel.setBackground(myColor.greyL1);
       
       previewChartButton.setText("Previous");
       previewChartButton.setSize(new java.awt.Dimension(100, 26));
       previewChartButton.addActionListener(new java.awt.event.ActionListener() {
           public void actionPerformed(java.awt.event.ActionEvent evt) {
               previewChartButtonActionPerformed(evt);
           }
       });

       nextChartButton.setText("Next");
       nextChartButton.setSize(new java.awt.Dimension(100, 26));
       nextChartButton.addActionListener(new java.awt.event.ActionListener() {
           public void actionPerformed(java.awt.event.ActionEvent evt) {
               nextChartButtonActionPerformed(evt);
           }
       });

       tittleScrollPane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
       tittleScrollPane.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
       tittleScrollPane.setBorder(BorderFactory.createLineBorder(myColor.greyL1));
       
       tittleTextArea.setEditable(false);
       tittleTextArea.setColumns(20);
       tittleTextArea.setRows(5);
       tittleTextArea.setText("\tTask Selected");
       tittleTextArea.setBackground(myColor.greyL1);
       
       tittleTextArea.setFont(new Font("Arial", 0 , 14));
       tittleTextArea.setMargin(new Insets(4,3, 0, 0));
       tittleTextArea.setPreferredSize(new java.awt.Dimension(200, 26));
       tittleTextArea.setSize(new java.awt.Dimension(200, 26));
       tittleScrollPane.setViewportView(tittleTextArea);

       if(!this.saveChart)saveOrLoadSimulationButton.setText("Browse...");
       else saveOrLoadSimulationButton.setText("Save Chart");
       
       saveOrLoadSimulationButton.setSize(new java.awt.Dimension(80, 26));
       saveOrLoadSimulationButton.addActionListener(new java.awt.event.ActionListener() {
           public void actionPerformed(java.awt.event.ActionEvent evt) {
               saveOrLoadSimulationButtonActionPerformed(evt);
           }
       });
       
       moveForwardButton.setText("Move Forward");
       moveForwardButton.setSize(new java.awt.Dimension(100, 26));
       moveForwardButton.addActionListener(new java.awt.event.ActionListener() {
           public void actionPerformed(java.awt.event.ActionEvent evt) {
               moveForwardButtonActionPerformed(evt);
           }
       });

       moveBackButton.setText("Move Backward");
       moveBackButton.setSize(new java.awt.Dimension(100, 26));
       moveBackButton.addActionListener(new java.awt.event.ActionListener() {
           public void actionPerformed(java.awt.event.ActionEvent evt) {
               moveBackButtonActionPerformed(evt);
           }
       });

       GroupLayout menuChartPanelLayout = new GroupLayout(menuChartPanel);
       menuChartPanel.setLayout(menuChartPanelLayout);
       menuChartPanelLayout.setHorizontalGroup(
           menuChartPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
           .addGroup(menuChartPanelLayout.createSequentialGroup()
    		   .addContainerGap()
               .addComponent(previewChartButton, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
               .addComponent(moveBackButton, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
               .addComponent(saveOrLoadSimulationButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addGap(18, 18, 18)
               .addComponent(tittleScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
               .addComponent(moveForwardButton)
               .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
               .addComponent(nextChartButton, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addContainerGap())
       );
       menuChartPanelLayout.setVerticalGroup(
           menuChartPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
           .addGroup(GroupLayout.Alignment.TRAILING, menuChartPanelLayout.createSequentialGroup()
               .addGap(2, 2, 2)
               .addGroup(menuChartPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                       .addComponent(tittleScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                       .addGroup(menuChartPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                           .addComponent(previewChartButton, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                           .addComponent(nextChartButton, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                           .addComponent(moveForwardButton, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                           .addComponent(moveBackButton, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                           .addComponent(saveOrLoadSimulationButton, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)))
                   .addGap(2, 2, 2))
       );

       GroupLayout chartGraphicPanelLayout = new GroupLayout(chartGraphicPanel);
       chartGraphicPanel.setLayout(chartGraphicPanelLayout);
       chartGraphicPanelLayout.setHorizontalGroup(
           chartGraphicPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
           .addGap(0, 800, Short.MAX_VALUE)
       );
       chartGraphicPanelLayout.setVerticalGroup(
           chartGraphicPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
           .addGap(0, 308, Short.MAX_VALUE)
       );

       GroupLayout layout = new GroupLayout(this);
       this.setLayout(layout);
       layout.setHorizontalGroup(
           layout.createParallelGroup(GroupLayout.Alignment.LEADING)
           .addGroup(layout.createSequentialGroup()
               .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                   .addComponent(menuChartPanel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                   .addComponent(chartGraphicPanel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
               .addGap(0, 0, Short.MAX_VALUE))
       );
       layout.setVerticalGroup(
           layout.createParallelGroup(GroupLayout.Alignment.LEADING)
           .addGroup(layout.createSequentialGroup()
               .addComponent(menuChartPanel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
               .addGap(2, 2, 2)
               .addComponent(chartGraphicPanel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
               .addGap(0, 0, Short.MAX_VALUE))
       );
   }// </editor-fold> 
   
   private void moveBackButtonActionPerformed(java.awt.event.ActionEvent evt) {                                               
       // TODO add your handling code here:
	   chartGraphicPanel.moveBackGraphic(10, 0);
	   
	   
   }                                              

   private void moveForwardButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                  
       // TODO add your handling code here:
	   chartGraphicPanel.moveForewardGraphic(10, 0);
   }  
   
   private void MoveForwardButtonMousePressed(java.awt.event.MouseEvent evt) {                                               
      //if(evt.getModifiers() == MouseEvent.MOUSE_PRESSED) {
    	  this.forwardPressed = true;
    	  forwardThread();
      //}
   }
   volatile private boolean isRunningForward = false;
private boolean saveChart;
   
  
   
   private synchronized boolean checkAndMarkForward() {
       if (isRunningForward) return false;
       isRunningForward = true;
       return true;
   }
   
   private void forwardThread() {
	   if (checkAndMarkForward()) {
	        new Thread() {
	            public void run() {
	                do {
	                	chartGraphicPanel.moveForewardGraphic(10, 0);
	                } while (forwardPressed);
	                isRunningForward = false;
	            }
	        }.start();
	    }
   }

   private void MoveForwardButtonMouseReleased(java.awt.event.MouseEvent evt) {                                               
	   //if(evt.getModifiers() == MouseEvent.MOUSE_RELEASED)   {
		  this.forwardPressed = false;
	   //}
   }
   
   private void MoveBackButtonMousePressed(java.awt.event.MouseEvent evt) {                                               
      
   }
   
   private void MoveBackButtonMouseReleased(java.awt.event.MouseEvent evt) {                                               
	      
   }

   private void previewChartButtonActionPerformed(java.awt.event.ActionEvent evt) {  
	   this.chartGraphicPanel.drawPreviusTask();
   }                                                  

   private void nextChartButtonActionPerformed(java.awt.event.ActionEvent evt) {   
	   this.chartGraphicPanel.drawNextTask();
   }  
   
   private File chooseFile() {
   	
	   	JFileChooser chooserFile = new JFileChooser(System.getProperty("user.home"));
	   	int option = chooserFile.showOpenDialog(null);
	   	
	   	try {
	   		
	   		if(option == chooserFile.APPROVE_OPTION) {
	   			File file = chooserFile.getSelectedFile();
	   			return file;
	   		}
	   		else {
	   			this.controller.setPopUpMessage("Must choose a file");
	   			LOG.error("ERROR MenuPanel chooseFile(): No file has been chosen");
	   		}
	   		
	   	}catch(Exception e){
	   		e.printStackTrace();
	   	}
	   	return null;
   }
   
   private void saveFile() {
	   	
	   	JFileChooser chooserFile = new JFileChooser(System.getProperty("user.dir"));
	   	int option = chooserFile.showSaveDialog(null);
	   	
	   	try {
	   		
	   		if(option == chooserFile.APPROVE_OPTION) {
	   			File file = chooserFile.getSelectedFile();
	   			String saveFile =this.controller.saveSimulation(this.controller.getTraceFileGenerated(),file.getAbsolutePath());
	   			this.controller.setPopUpMessage("The simulation has been saved in:" + saveFile);
	   		}
	   	}catch(Exception e){
	   		e.printStackTrace();
	   		this.controller.setPopUpMessage("The simulation could not be saved" );
	   	}
  }

   private void saveOrLoadSimulationButtonActionPerformed(java.awt.event.ActionEvent evt) {    
		   if(!this.saveChart) {
			   //abrir fileChooser para cargar fichero
			 File file = chooseFile();
			 LOG.debug("File choosed:" + file.getAbsolutePath());
		
			int maxWidth = -1;
			
		    String widthChoose =  (String) JOptionPane.showInputDialog(null, "Choose the maximum width of \n the graph (Number of panels)" , "Maximum Width", JOptionPane.QUESTION_MESSAGE, null, optionsChartWidth, optionsChartWidth[0]);
			
		    if(!widthChoose.equals("Automatic")) maxWidth = Integer.parseInt(widthChoose);
			
			String optionRun = (String) JOptionPane.showInputDialog(null, "Option RUN" , "RUN", JOptionPane.QUESTION_MESSAGE, null, this.optionsRun, optionsRun[0]);
			 
			 LOG.info("OPTION CHOOSED :" + widthChoose + " Run option: " + optionRun);
			 if(file.getName().endsWith(".txt")) {
				 try {
					 if(optionRun.equals("Complete"))this.controller.loadSimulation(file, false,this.myChart,maxWidth);
					 else this.controller.loadSimulation(file, true,this.myChart,maxWidth);
				 }catch(Exception e) {
					 LOG.error("ERROR: " + e);
				 }
			 }
			 else {
				 this.controller.setPopUpMessage("You have chosen an invalid file.\n Please choose the trace file generated by \n the simulator with .txt extension");
			 }
			 
			
		   }
	       else {//abrir fileChooser para guardar fichero
	    	   saveFile();
	       }
	   
   }      
   
   public void setSaveButton() {
	   saveOrLoadSimulationButton.setText("Save Chart");
	   this.saveChart = true;
   }
   public void setNameTaskSelected(String nameTask) {
	   
	   tittleTextArea.setBackground(myColor.greyL1);
	   tittleTextArea.setFont(new Font("Arial", 0,10));
       tittleTextArea.setMargin(new Insets(4, 3, 0, 0));
	   tittleTextArea.setText("\t"+ nameTask);
   }
   
   public void setNameTaskSelectedUp(String nameTask) {
	   
	   tittleTextArea.setBackground(myColor.greyL1);
       tittleTextArea.setMargin(new Insets(4, 3, 0, 0));
       tittleTextArea.setFont(new Font("Arial", 0,10));
       //tittleTextArea.setText("\t");
	   tittleTextArea.setText("\t" + nameTask);
   }
   

   public void setTaskInfo(BuildTaskInformation taskInfo) {
	//this.taskInfo = taskInfo;
   }
private JButton moveBackButton;
   private JButton moveForwardButton;
   private Chart chartGraphicPanel;
   private JPanel menuChartPanel;
   private JButton nextChartButton;
   private JButton previewChartButton;
   private JButton saveOrLoadSimulationButton;
   private JScrollPane tittleScrollPane;
   private JTextArea tittleTextArea;
   // End of variables declaration  
   
	public void setController(AppController controller) {
		// TODO Auto-generated method stub
		this.controller = controller;
		this.chartGraphicPanel.setController(controller);
		
	}

	public void setChartInfo(BuildTaskInformation taskInfo, int myChart, boolean stepByStep,int maxWidth) {
		// TODO Auto-generated method stub
		   this.myChart = myChart;
		   this.stepByStep = stepByStep;
		   this.chartLoaded = true;
		   this.chartGraphicPanel.removeAll();
		   chartGraphicPanel = new Chart(taskInfo,this.myChart,this.stepByStep,this.LOG,maxWidth);
		   //chartGraphicPanel.updateUI();
		   this.initComponents();
		   
		   //this.updateUI();
	}



	
	
}
